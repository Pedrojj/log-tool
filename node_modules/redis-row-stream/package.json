{
  "name": "redis-row-stream",
  "version": "0.0.1",
  "description": "stream items into a redis instance for storage",
  "author": {
    "name": "John Goodall",
    "email": "jgoodall@ornl.gov"
  },
  "contributors": [
    {
      "name": "John Goodall",
      "email": "jgoodall@ornl.gov"
    },
    {
      "name": "Mike Iannacone",
      "email": "iannaconemd@ornl.gov"
    }
  ],
  "dist-tags": {
    "latest": "0.0.1"
  },
  "versions": [
    "0.0.1"
  ],
  "time": {
    "0.0.1": "2012-07-25T15:00:00.000Z"
  },
  "private": true,
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha -R spec",
    "watch": "./node_modules/mocha/bin/mocha -R min --watch",
    "docs": "./node_modules/dox-foundation/bin/dox-foundation > doc/api.html < redis-row-stream.js ; ./node_modules/mocha/bin/mocha -R markdown > doc/tests.md"
  },
  "main": "./redis-row-stream.js",
  "dependencies": {
    "redis": "=0.7.2",
    "reds": ">=0.2.2"
  },
  "devDependencies": {
    "mocha": ">=1.3.0",
    "should": ">=1.0.0",
    "stream-spec": ">=0.3",
    "stream-tester": ">=0.0.2",
    "dox-foundation": ">0.3"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ornl-situ/redis-row-stream.git"
  },
  "keywords": [
    "redis",
    "stream"
  ],
  "engines": {
    "node": ">= 0.6.0 < 0.9.0"
  },
  "readme": "[![Build Status](https://travis-ci.org/ornl-situ/redis-row-stream.png?branch=master)](https://travis-ci.org/ornl-situ/redis-row-stream)\n\n\n# Send a stream of items to Redis\n\nThis module will take in objects or strings as a [stream](http://nodejs.org/docs/latest/api/stream.html), and send it to redis for storage, with a key of some specified prefix, followed by some index, such as \"prefix:0\".\n\n## Install\n\nnpm install redis-row-stream\n\n## Configuration\n\nThe RedisPubsubStream constructor should be passed an opts object as its argument, similar to the following:\n\n    var opts = { keyPrefix:\"simpleRowTest\"\n        , index:false\n        , indexedFields:[]\n        , serverAddress: \"localhost\" \n        , serverPort:6379 \n        , redisOpts: {} }\n\n`keyPrefix` is the prefix to use for all keys.  It will be followed by some index, as mentioned above, so in this case keys would be \"simpleRowTest:0\", \"simpleRowTest:1\", etc.\n\n`index` is a boolean flag that indicates if any fields should be indexed (using [reds](https://github.com/visionmedia/reds) currently).  If set true, then the fields listed in `indexedFields` will be indexed in this way.  (Note that adding fields to the index will somewhat slow performance.)\n\n`serverAddress` is the address of Redis server, and `port` is the port on which the Redis server is listening.\n\nThe `redisOpts` field contains any options to pass to the Redis constructor, which are listed in the [documentation for the node_redis module](https://github.com/mranney/node_redis#rediscreateclientport-host-options)\n\n## Usage\n\nFor each incoming message, this module will output a corresponding pubsub message, on the specified channel, sent to the specified Redis instance.\n\nThis example (based on one of the test cases) reads in a json file with an array of items, parses them, and sends each items to the pubsub stream. \n\n    var RedisRowStream = require('../redis-row-stream.js')\n      , fs = require('fs')\n      , path = require('path')\n\n    var inFile = path.join('test', 'input', 'simpleData.json')\n      , opts = { keyPrefix:\"simpleRowTest\"\n        , index:false\n        , indexedFields:[]\n        , serverAddress: \"localhost\" \n        , serverPort:6379 \n        , redisOpts: {} }\n\n    var testStream = new RedisRowStream(opts)\n\n    fs.readFile(inFile, function (err, data) {\n      if (err) throw err\n      data = JSON.parse(data)\n      for(var i=0; i<data.length; i++){\n        testStream.write(data[i]);\n      }\n    })\n\nRather than sending items with .write(), a more typical example may simply pipe several streams together, for example:\n\n    var util = require('util')\n      , RedisRowStream = require('regex-stream')\n\n    var input = require('fs').createReadStream('./data.txt', {encoding:'utf-8'})\n      , parser = {\n          \"regex\": \"^([\\\\S]+) ([\\\\S]+) ([\\\\S]+)\"\n        , \"labels\": [\"A label\", \"B label\", \"C label\"]\n        , \"delimiter\": \"\\r\\n|\\n\"\n      }\n      , regexStream = new RegexStream(parser)\n\n    var opts = { keyPrefix:\"simpleRowTest\"\n        , index:false\n        , indexedFields:[]\n        , serverAddress: \"localhost\" \n        , serverPort:6379 \n        , redisOpts: {} }\n\n    var testStream = new RedisRowStream(opts)\n\n    // pipe data from input file to the regexStream parser to redis pubsub\n    input.pipe(regexStream)\n    regexStream.pipe(testStream)\n\nThis example will create a file stream, use the [regexStream](https://github.com/ornl-situ/regex-stream) instance to parse its items, and then pipe that output into the RedisPubsubStream instance.\n\nSee the test cases for some usage examples.\n\n## Development\n\nIf you are going to do development, you may want to use the [git pre-commit hook](http://git-scm.com/book/en/Customizing-Git-Git-Hooks), which will check the `redis-row-stream.js` file using [jshint](https://github.com/jshint/jshint) script (if you have it installed) and run the [mocha](visionmedia.github.com/mocha/) tests (mocha is in the node_modules directory). If either of these fail, the commit wont work. To use the hook, from project directory, run:\n\n    ln -s ../../pre-commit.sh .git/hooks/pre-commit\n\n# License\n\nregex-stream is freely distributable under the terms of the MIT License.\n\nCopyright (c) John R. Goodall (the \"Original Author\")\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n \nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS, THE U.S. GOVERNMENT, OR UT-BATTELLE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "redis-row-stream@0.0.1",
  "dist": {
    "shasum": "30a6b161f37bcbead1a54816afc05c4f5dcb6549"
  },
  "_from": "redis-row-stream@git+https://github.com/ornl-situ/redis-row-stream.git"
}
